package test;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import Lab2.Grades;

import java.util.*;

public class TestGrades {

	
	@SuppressWarnings("deprecation")
	@Test
	public final void testAverage() {
		Grades simple = new Grades("simple");
		Grades complex = new Grades("complex");
		Grades empty = new Grades("empty");
		Grades even = new Grades("even");
		simple.setGrades(0);
		complex.setGrades(5);
		complex.setGrades(10);
		complex.setGrades(15);
		complex.setGrades(20);
		complex.setGrades(25);
		complex.setGrades(30);
		complex.setGrades(35);
		complex.setGrades(40);
		complex.setGrades(45);
		complex.setGrades(50);
		complex.setGrades(55);
		complex.setGrades(60);
		complex.setGrades(65);
		complex.setGrades(70);
		complex.setGrades(75);
		complex.setGrades(80);
		complex.setGrades(85);
		complex.setGrades(88);
		complex.setGrades(90);
		complex.setGrades(95);
		complex.setGrades(100);
		even.setGrades(25);
		even.setGrades(50);
		even.setGrades(75);
		even.setGrades(100);
		System.out.println(complex.average());
		assertTrue("Zero divided by 1 should be Zero", (0==simple.average()));
		assertTrue("Average should equal 54.1904761905", (54.19047619047619==complex.average()));
		assertTrue("Average should equal 62.5", (62.5==even.average()));
		boolean nullError = false;
		assertTrue("Empty set is NaN", (empty.average()==Double.NaN));
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testMedian() {
		Grades simple = new Grades("simple");
		Grades complex = new Grades("complex");
		Grades empty = new Grades("empty");
		Grades even = new Grades("even");
		simple.setGrades(0);
		complex.setGrades(5);
		complex.setGrades(10);
		complex.setGrades(15);
		complex.setGrades(20);
		complex.setGrades(25);
		complex.setGrades(30);
		complex.setGrades(35);
		complex.setGrades(40);
		complex.setGrades(45);
		complex.setGrades(50);
		complex.setGrades(55);
		complex.setGrades(60);
		complex.setGrades(65);
		complex.setGrades(70);
		complex.setGrades(75);
		complex.setGrades(80);
		complex.setGrades(85);
		complex.setGrades(88);
		complex.setGrades(90);
		complex.setGrades(95);
		complex.setGrades(100);
		even.setGrades(25);
		even.setGrades(50);
		even.setGrades(75);
		even.setGrades(100);
		assertEquals("Median should be 55", 55, complex.median());
		assertEquals("Median should be 62.5", 62.5, even.median());
		assertEquals("Median should be 0", 0, simple.median());
		boolean nullError = false;
        try {
            empty.median();
        } catch (NullPointerException e) {
            nullError = true;
        }
        assertTrue("should be a NullPointerException", nullError);
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testMinimum() {
		Grades simple = new Grades("simple");
		Grades complex = new Grades("complex");
		Grades empty = new Grades("empty");
		Grades even = new Grades("even");
		simple.setGrades(0);
		complex.setGrades(5);
		complex.setGrades(10);
		complex.setGrades(15);
		complex.setGrades(20);
		complex.setGrades(25);
		complex.setGrades(30);
		complex.setGrades(35);
		complex.setGrades(40);
		complex.setGrades(45);
		complex.setGrades(50);
		complex.setGrades(55);
		complex.setGrades(60);
		complex.setGrades(65);
		complex.setGrades(70);
		complex.setGrades(75);
		complex.setGrades(80);
		complex.setGrades(85);
		complex.setGrades(88);
		complex.setGrades(90);
		complex.setGrades(95);
		complex.setGrades(100);
		even.setGrades(25);
		even.setGrades(50);
		even.setGrades(75);
		even.setGrades(100);
		assertTrue("must equal 0",(simple.minimum()==0));
		assertTrue("must equal 5",(complex.minimum()==5));
		assertTrue("must equal 25",(even.minimum()==25));
		boolean nullError = false;
        try {
            empty.minimum();
        } catch (NoSuchElementException e) {
            nullError = true;
        }
        assertTrue("should be a NullPointerException", nullError);
		fail("Not yet implemented"); // TODO
	}

}
